// Code generated by go-swagger; DO NOT EDIT.

package fingerpaths

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// FingerPathsPostCreatedCode is the HTTP code returned for type FingerPathsPostCreated
const FingerPathsPostCreatedCode int = 201

/*FingerPathsPostCreated fingerpaths added

swagger:response fingerPathsPostCreated
*/
type FingerPathsPostCreated struct {
}

// NewFingerPathsPostCreated creates FingerPathsPostCreated with default headers values
func NewFingerPathsPostCreated() *FingerPathsPostCreated {

	return &FingerPathsPostCreated{}
}

// WriteResponse to the client
func (o *FingerPathsPostCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// FingerPathsPostBadRequestCode is the HTTP code returned for type FingerPathsPostBadRequest
const FingerPathsPostBadRequestCode int = 400

/*FingerPathsPostBadRequest no associated board

swagger:response fingerPathsPostBadRequest
*/
type FingerPathsPostBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewFingerPathsPostBadRequest creates FingerPathsPostBadRequest with default headers values
func NewFingerPathsPostBadRequest() *FingerPathsPostBadRequest {

	return &FingerPathsPostBadRequest{}
}

// WithPayload adds the payload to the finger paths post bad request response
func (o *FingerPathsPostBadRequest) WithPayload(payload interface{}) *FingerPathsPostBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the finger paths post bad request response
func (o *FingerPathsPostBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FingerPathsPostBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
