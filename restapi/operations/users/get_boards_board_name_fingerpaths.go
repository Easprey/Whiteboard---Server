// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetBoardsBoardNameFingerpathsHandlerFunc turns a function with the right signature into a get boards board name fingerpaths handler
type GetBoardsBoardNameFingerpathsHandlerFunc func(GetBoardsBoardNameFingerpathsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBoardsBoardNameFingerpathsHandlerFunc) Handle(params GetBoardsBoardNameFingerpathsParams) middleware.Responder {
	return fn(params)
}

// GetBoardsBoardNameFingerpathsHandler interface for that can handle valid get boards board name fingerpaths params
type GetBoardsBoardNameFingerpathsHandler interface {
	Handle(GetBoardsBoardNameFingerpathsParams) middleware.Responder
}

// NewGetBoardsBoardNameFingerpaths creates a new http.Handler for the get boards board name fingerpaths operation
func NewGetBoardsBoardNameFingerpaths(ctx *middleware.Context, handler GetBoardsBoardNameFingerpathsHandler) *GetBoardsBoardNameFingerpaths {
	return &GetBoardsBoardNameFingerpaths{Context: ctx, Handler: handler}
}

/*GetBoardsBoardNameFingerpaths swagger:route GET /boards/{boardName}/fingerpaths users getBoardsBoardNameFingerpaths

getBoardFingerPaths

Gets all fingerpaths associated with the given board.


*/
type GetBoardsBoardNameFingerpaths struct {
	Context *middleware.Context
	Handler GetBoardsBoardNameFingerpathsHandler
}

func (o *GetBoardsBoardNameFingerpaths) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBoardsBoardNameFingerpathsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
