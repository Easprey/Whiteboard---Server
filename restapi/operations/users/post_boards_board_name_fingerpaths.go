// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostBoardsBoardNameFingerpathsHandlerFunc turns a function with the right signature into a post boards board name fingerpaths handler
type PostBoardsBoardNameFingerpathsHandlerFunc func(PostBoardsBoardNameFingerpathsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBoardsBoardNameFingerpathsHandlerFunc) Handle(params PostBoardsBoardNameFingerpathsParams) middleware.Responder {
	return fn(params)
}

// PostBoardsBoardNameFingerpathsHandler interface for that can handle valid post boards board name fingerpaths params
type PostBoardsBoardNameFingerpathsHandler interface {
	Handle(PostBoardsBoardNameFingerpathsParams) middleware.Responder
}

// NewPostBoardsBoardNameFingerpaths creates a new http.Handler for the post boards board name fingerpaths operation
func NewPostBoardsBoardNameFingerpaths(ctx *middleware.Context, handler PostBoardsBoardNameFingerpathsHandler) *PostBoardsBoardNameFingerpaths {
	return &PostBoardsBoardNameFingerpaths{Context: ctx, Handler: handler}
}

/*PostBoardsBoardNameFingerpaths swagger:route POST /boards/{boardName}/fingerpaths users postBoardsBoardNameFingerpaths

addBoardFingerPaths

Adds fingerpaths to the associated board.

*/
type PostBoardsBoardNameFingerpaths struct {
	Context *middleware.Context
	Handler PostBoardsBoardNameFingerpathsHandler
}

func (o *PostBoardsBoardNameFingerpaths) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBoardsBoardNameFingerpathsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
