// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BoardsFingerpathsByBoardNameGetHandlerFunc turns a function with the right signature into a boards fingerpaths by board name get handler
type BoardsFingerpathsByBoardNameGetHandlerFunc func(BoardsFingerpathsByBoardNameGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BoardsFingerpathsByBoardNameGetHandlerFunc) Handle(params BoardsFingerpathsByBoardNameGetParams) middleware.Responder {
	return fn(params)
}

// BoardsFingerpathsByBoardNameGetHandler interface for that can handle valid boards fingerpaths by board name get params
type BoardsFingerpathsByBoardNameGetHandler interface {
	Handle(BoardsFingerpathsByBoardNameGetParams) middleware.Responder
}

// NewBoardsFingerpathsByBoardNameGet creates a new http.Handler for the boards fingerpaths by board name get operation
func NewBoardsFingerpathsByBoardNameGet(ctx *middleware.Context, handler BoardsFingerpathsByBoardNameGetHandler) *BoardsFingerpathsByBoardNameGet {
	return &BoardsFingerpathsByBoardNameGet{Context: ctx, Handler: handler}
}

/*BoardsFingerpathsByBoardNameGet swagger:route GET /boards/{boardName}/fingerpaths users boardsFingerpathsByBoardNameGet

getBoardFingerPaths

Gets all fingerpaths associated with the given board.


*/
type BoardsFingerpathsByBoardNameGet struct {
	Context *middleware.Context
	Handler BoardsFingerpathsByBoardNameGetHandler
}

func (o *BoardsFingerpathsByBoardNameGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBoardsFingerpathsByBoardNameGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
