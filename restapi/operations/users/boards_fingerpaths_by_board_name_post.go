// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BoardsFingerpathsByBoardNamePostHandlerFunc turns a function with the right signature into a boards fingerpaths by board name post handler
type BoardsFingerpathsByBoardNamePostHandlerFunc func(BoardsFingerpathsByBoardNamePostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BoardsFingerpathsByBoardNamePostHandlerFunc) Handle(params BoardsFingerpathsByBoardNamePostParams) middleware.Responder {
	return fn(params)
}

// BoardsFingerpathsByBoardNamePostHandler interface for that can handle valid boards fingerpaths by board name post params
type BoardsFingerpathsByBoardNamePostHandler interface {
	Handle(BoardsFingerpathsByBoardNamePostParams) middleware.Responder
}

// NewBoardsFingerpathsByBoardNamePost creates a new http.Handler for the boards fingerpaths by board name post operation
func NewBoardsFingerpathsByBoardNamePost(ctx *middleware.Context, handler BoardsFingerpathsByBoardNamePostHandler) *BoardsFingerpathsByBoardNamePost {
	return &BoardsFingerpathsByBoardNamePost{Context: ctx, Handler: handler}
}

/*BoardsFingerpathsByBoardNamePost swagger:route POST /boards/{boardName}/fingerpaths users boardsFingerpathsByBoardNamePost

addBoardFingerPaths

Adds fingerpaths to the associated board.

*/
type BoardsFingerpathsByBoardNamePost struct {
	Context *middleware.Context
	Handler BoardsFingerpathsByBoardNamePostHandler
}

func (o *BoardsFingerpathsByBoardNamePost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBoardsFingerpathsByBoardNamePostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
