// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FingerPathsGetHandlerFunc turns a function with the right signature into a finger paths get handler
type FingerPathsGetHandlerFunc func(FingerPathsGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FingerPathsGetHandlerFunc) Handle(params FingerPathsGetParams) middleware.Responder {
	return fn(params)
}

// FingerPathsGetHandler interface for that can handle valid finger paths get params
type FingerPathsGetHandler interface {
	Handle(FingerPathsGetParams) middleware.Responder
}

// NewFingerPathsGet creates a new http.Handler for the finger paths get operation
func NewFingerPathsGet(ctx *middleware.Context, handler FingerPathsGetHandler) *FingerPathsGet {
	return &FingerPathsGet{Context: ctx, Handler: handler}
}

/*FingerPathsGet swagger:route GET /boards/{boardName}/fingerpaths fingerPathsGet

Gets all fingerpaths associated with the given board.


*/
type FingerPathsGet struct {
	Context *middleware.Context
	Handler FingerPathsGetHandler
}

func (o *FingerPathsGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFingerPathsGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
